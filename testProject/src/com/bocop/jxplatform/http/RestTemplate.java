package com.bocop.jxplatform.http;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Map;import android.content.Context;import com.boc.jx.baseUtil.asynchttpclient.AsyncHttpClient;import com.boc.jx.baseUtil.asynchttpclient.AsyncHttpResponseHandler;import com.boc.jx.baseUtil.asynchttpclient.PersistentCookieStore;import com.boc.jx.baseUtil.asynchttpclient.RequestParams;import com.boc.jx.common.util.ContentUtils;import com.boc.jx.constants.Constants;import com.bocop.jxplatform.config.BocSdkConfig;/** * 异步网络请求模板 *  * @author xmtang * @version 3.0 * @date 2014-09-07 * @notice 推荐使用这个 * @api http://loopj.com/android-async-http/doc/com/loopj/android/http/package- *      summary.html */public final class RestTemplate {	/**	 * URL	 */	private static final String BASE_URL = "http://22.220.13.64:8080";	/**	 * 实例化对象	 */	private static AsyncHttpClient client = new AsyncHttpClient();	/**	 * 缓存Cookie	 */	private PersistentCookieStore cookieStore;	private Context context;	/** 初始化相关参数 */	static {		client.setTimeout(20000);	}	public RestTemplate(Context c) {		this.context = c;		cookieStore = new PersistentCookieStore(c);		client.setCookieStore(cookieStore);	}	/**	 * get请求	 * 	 * @param url	 *            服务器地址	 * @param params	 *            请求参数	 * @param responseHandler	 *            响应处理器	 */	public void get(String url, RequestParams params,			AsyncHttpResponseHandler responseHandler) {		// params.put("platform", "a");		client.get(getAbsoluteUrl(url), params, responseHandler);	}	/**	 * get请求	 * 	 * @param url	 *            服务器地址	 * @param map	 *            请求参数	 * @param responseHandler	 *            响应处理器	 */	public void get(String url, Map<String, String> map,			AsyncHttpResponseHandler responseHandler) {		RequestParams params = new RequestParams(map);		get(url, params, responseHandler);	}	/**	 * post请求	 * 	 * @param url	 *            服务器地址	 * @param params	 *            请求参数	 * @param responseHandler	 *            响应处理器	 */	public void post(String url, RequestParams params,			AsyncHttpResponseHandler responseHandler) {		// params.put("csrfmiddlewaretoken", CookieUtils.fetchCookie(context));		// params.put("platform", "a");		client.post(getAbsoluteUrl(url), params, responseHandler);	}	/**	 * post请求	 * 	 * @param url	 *            服务器地址	 * @param map	 *            请求参数	 * @param responseHandler	 *            响应处理器	 */	public void post(String url, Map<String, String> map,			AsyncHttpResponseHandler responseHandler) {		RequestParams params = new RequestParams(map);		post(url, params, responseHandler);	}	/**	 * post请求(没有报文体，只有报文头的请求)	 * 	 * @param url	 *            服务器地址	 * @param params	 *            请求参数	 * @param responseHandler	 *            响应处理器	 */	public void post_nobody(String url, RequestParams params,			AsyncHttpResponseHandler responseHandler) {		getPublicHead();		client.post(getAbsoluteUrl(url), params, responseHandler);	}	public void getPublicHead() {		String action = ContentUtils.getSharePreStr(context, Constants.SHARED_PREFERENCE_NAME, Constants.ACCESS_TOKEN);		String userid = ContentUtils.getSharePreStr(context, Constants.SHARED_PREFERENCE_NAME, Constants.USER_ID);		client.addHeader("clentid", BocSdkConfig.CONSUMER_KEY);		client.addHeader("acton", action);		client.addHeader("userid", userid);		client.addHeader("chnflg", "1");		SimpleDateFormat format = new SimpleDateFormat("yyyyMMDD");		// 获取当前时间		String nowData = format.format(new Date(System.currentTimeMillis()));		client.addHeader("trandt", nowData);		SimpleDateFormat formatTime = new SimpleDateFormat("HHmmss");		// 获取当前时间		String nowTime = formatTime.format(new Date(System.currentTimeMillis()));		client.addHeader("trantm", nowTime);		client.addHeader("uuid", "");	}	/**	 * 只在第一次请求时候调用,其它的POST请求不要调用这个方法,只为获取token	 * 	 * @param url	 * @param responseHandler	 */	public void post_crftoken(String url, RequestParams params,			AsyncHttpResponseHandler responseHandler) {		client.post(getAbsoluteUrl(url), params, responseHandler);	}	/**	 * 获取绝对路径	 * 	 * @param relativeUrl	 * @return	 */	private static String getAbsoluteUrl(String relativeUrl) {		if (relativeUrl.startsWith("http://"))			return relativeUrl;		System.out.println("拼接后的url====="+BASE_URL+relativeUrl);		return BASE_URL + relativeUrl;	}	/**	 * 取消当前的网络请求	 * 	 * @param c	 */	public void cancelRequest(Context c) {		client.cancelRequests(c, true);	}	public void clearCookies() {		cookieStore.clear();	}}